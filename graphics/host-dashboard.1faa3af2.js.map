{"version":3,"sources":["host-dashboard.js"],"names":["$","donationTotalElement","prizesContainer","bidsContainer","runsContainer","prizeHTML","bidHTML","runHTML","donationTotal","nodecg","Replicant","on","newVal","html","formatDollarAmount","value","text","name","forEach","prize","prizeElement","clone","provided","minimum_bid","moment","end_timestamp","format","append","i","bid","bidElement","game","category","war","options","length","option","total","allow_user_options","bidLeft","goal","runDataArray","runDataActiveRun","runFinishTimes","runFinishTimesInit","runDataActiveRunInit","runsInit","setRuns","indexOfCurrentRun","findIndexInRunDataArray","run","runElement","show","id","hide","system","formPlayerNamesString","estimate","runData","namesArray","namesList","teams","team","teamPlayerArray","players","player","push","join","indexOfRun","amount","forceRemoveCents","toFixed","Math","floor","toLocaleString","minimumFractionDigits"],"mappings":"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","file":"host-dashboard.1faa3af2.js","sourceRoot":"..\\src\\graphics","sourcesContent":["'use strict';\n$(() => {\n  // JQuery selectors.\n  var donationTotalElement = $('#donationTotal');\n  var prizesContainer = $('#prizesContainer');\n  var bidsContainer = $('#bidsContainer');\n  var runsContainer = $('#runsContainer');\n\t\n  // Declaring variables.\n  var prizeHTML = $('<div class=\"prize\"><span class=\"prizeName\"></span><br>Provided by <span class=\"prizeProvider\"></span><br>minimum donation <span class=\"prizeMinDonation\"></span><br>Ends: <span class=\"prizeEnd\"></span></div>');\n  var bidHTML = $('<div class=\"bid\"><span class=\"bidGame\"></span><br><span class=\"bidName\"></span></div>')\n  var runHTML = $('<div class=\"run\"><span class=\"justMissed\">YOU HAVE JUST WATCHED<br></span><span class=\"gameName\"></span><br><span class=\"gameCategory\"></span><br><span class=\"gameConsole\"></span><br><span class=\"gameRunners\"></span><br><span class=\"gameTime\"></span><br><span class=\"gameFinal\"></span></div>');\n\n  // Keep donation total updated.\n  var donationTotal = nodecg.Replicant('donationTotal');\n  donationTotal.on('change', newVal => {\n    donationTotalElement.html(formatDollarAmount(donationTotal.value, true));\n\t});\n\t\n\tconst video = nodecg.Replicant('currentVideoObj');\n\tvideo.on('change', (newVal) => {\n\t\tif (newVal) {\n\t\t\t$('#videoName').text(newVal.name);\n\t\t} else {\n\t\t\t$('#videoName').text('none currently');\n\t\t}\n\t});\n\t\n  // Keep prizes updated.\n  var prizes = nodecg.Replicant('prizes');\n  prizes.on('change', newVal => {\n    prizesContainer.html('');\n    newVal.forEach(prize => {\n      var prizeElement = prizeHTML.clone();\n      $('.prizeName', prizeElement).html(prize.name);\n      $('.prizeProvider', prizeElement).html(prize.provided);\n      $('.prizeMinDonation', prizeElement).html(formatDollarAmount(prize.minimum_bid));\n      $('.prizeEnd', prizeElement).html(moment(prize.end_timestamp).format('Do HH:mm'));\n      prizesContainer.append(prizeElement);\n    });\n  });\n\t\n  // Keep bids updated.\n  var bids = nodecg.Replicant('bids');\n  bids.on('change', newVal => {\n    var i = 0;\n    bidsContainer.html('');\n    newVal.forEach(bid => {\n      if (i >= 2) return;\n      var bidElement = bidHTML.clone();\n      $('.bidGame', bidElement).html(bid.game+' - '+bid.category);\n      $('.bidName', bidElement).html(bid.name);\n      // Donation Goal\n      if (!bid.war) {\n        var bidLeft = bid.goal - bid.total;\n        bidElement.append('<br>'+formatDollarAmount(bid.total)+'/'+formatDollarAmount(bid.goal));\n        bidElement.append('<br>'+formatDollarAmount(bidLeft)+' to goal'); \n      }\n      // Bid War\n      else {\n        if (bid.options.length) {\n          bid.options.forEach(option => {\n            bidElement.append('<br>'+option.name+' ('+formatDollarAmount(option.total)+')')\n          });\n\t\t\t\t\t\n          if (bid.allow_user_options)\n            bidElement.append('<br><i>Users can submit their own options.</i>')\n        }\n        else\n          bidElement.append('<br><i>No options submitted yet.</i>')\n      }\n      bidsContainer.append(bidElement);\n      i++;\n    });\n  });\n\t\n  var runDataArray = nodecg.Replicant('runDataArray', 'nodecg-speedcontrol');\n  var runDataActiveRun = nodecg.Replicant('runDataActiveRun', 'nodecg-speedcontrol');\n  var runFinishTimes = nodecg.Replicant('runFinishTimes', 'nodecg-speedcontrol');\n  var runFinishTimesInit = false;\n  var runDataActiveRunInit = false;\n  var runsInit = false;\n  runFinishTimes.on('change', newVal => {\n    runFinishTimesInit = true;\n    if (!runsInit && runFinishTimesInit && runDataActiveRunInit) {\n      setRuns();\n      runsInit = true;\n    }\n  });\n  runDataActiveRun.on('change', newVal => {\n    runDataActiveRunInit = true;\n    if (runFinishTimesInit && runDataActiveRunInit) {\n      setRuns();\n      runsInit = true;\n    }\n  });\n\t\n  function setRuns() {\n    runsContainer.html('');\n    var indexOfCurrentRun = findIndexInRunDataArray(runDataActiveRun.value);\n    for (var i = -1; i < 2; i++) {\n      var run = runDataArray.value[indexOfCurrentRun+i];\n      if (run) {\n        var runElement = runHTML.clone();\n        if (i === -1) {\n          $('.justMissed', runElement).show();\n          if (runFinishTimes.value[runDataActiveRun.value.id-1]) {\n            $('.gameFinal', runElement).html(runFinishTimes.value[runDataActiveRun.value.id-1]);\n            $('.gameFinal', runElement).show();\n          }\n        }\n        else {\n          $('.justMissed', runElement).hide();\n          $('.gameFinal', runElement).hide();\n        }\n        $('.gameName', runElement).html(run.game);\n        $('.gameCategory', runElement).html(run.category);\n        $('.gameConsole', runElement).html(run.system);\n        $('.gameRunners', runElement).html(formPlayerNamesString(run));\n        $('.gameTime', runElement).html(run.estimate);\n        runsContainer.append(runElement);\n      }\n    }\n  }\n\n  // Get the next X runs in the schedule.\n  function getNextRuns(runData, amount) {\n    var nextRuns = [];\n    var indexOfCurrentRun = findIndexInRunDataArray(runData);\n    for (var i = 1; i <= amount; i++) {\n      if (!runDataArray.value[indexOfCurrentRun + i]) break;\n      nextRuns.push(runDataArray.value[indexOfCurrentRun + i]);\n    }\n    return nextRuns;\n  }\n\n  // Returns how long until a run, based on the estimate of the previous run.\n  function formETAUntilRun(previousRun, whenTotal) {\n    var whenString = '';\n    if (!previousRun) whenString = 'Next';\n    else {\n      var previousRunTime = previousRun.estimateS + previousRun.setupTimeS;\n      var formatted = moment.utc().second(0).to(moment.utc().second(whenTotal + previousRunTime), true);\n      whenString = 'In about ' + formatted;\n      whenTotal += previousRunTime;\n    }\n    return [whenString, whenTotal];\n  }\n\n  // Converts milliseconds to a time string.\n  function msToTime(duration, noHour) {\n    var seconds = parseInt((duration / 1000) % 60),\n      minutes = parseInt((duration / (1000 * 60)) % 60),\n      hours = parseInt((duration / (1000 * 60 * 60)) % 24);\n\n    hours = (hours < 10) ? '0' + hours : hours;\n    minutes = (minutes < 10) ? '0' + minutes : minutes;\n    seconds = (seconds < 10) ? '0' + seconds : seconds;\n\n    var timeString = '';\n\n    if (!noHour)\n      timeString += hours + ':';\n    timeString += minutes + ':' + seconds;\n\n    return timeString;\n  }\n\n  // Goes through each team and members and makes a string to show the names correctly together.\n  function formPlayerNamesString(runData) {\n    var namesArray = [];\n    var namesList = 'No Player(s)';\n    runData.teams.forEach(team => {\n      var teamPlayerArray = [];\n      team.players.forEach(player => { teamPlayerArray.push(player.name); });\n      namesArray.push(teamPlayerArray.join(', '));\n    });\n    if (namesList.length) namesList = namesArray.join(' vs. ');\n    return namesList;\n  }\n\n  // Returns the total amount of players a run has.\n  function checkForTotalPlayers(runData) {\n    var amount = 0;\n    runData.teams.forEach(team => team.players.forEach(player => amount++));\n    return amount;\n  }\n\n  // Find array index of current run based on it's ID.\n  function findIndexInRunDataArray(run) {\n    var indexOfRun = -1;\n\n    // Completely skips this if the run variable isn't defined.\n    if (run) {\n      for (var i = 0; i < runDataArray.value.length; i++) {\n        if (run.id === runDataArray.value[i].id) {\n          indexOfRun = i; break;\n        }\n      }\n    }\n\n    return indexOfRun;\n  }\n\n  // Get a random integer, usually for selecting array elements.\n  // You will never get max as an output.\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n  function getRandomFloat(max) {\n    return Math.random() * max;\n  }\n\n  // Used to get the width of supplied text.\n  function getTextWidth(text, size) {\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    ctx.font = size + 'px \"Barlow Condensed\"'; /* Change if layout is changed. */\n    return ctx.measureText(text).width;\n  }\n\n  // Formats dollar amounts to the correct string.\n  function formatDollarAmount(amount, forceRemoveCents) {\n    // We drop the cents and add a comma over $1000.\n    if (amount < 1000 && !forceRemoveCents)\n      return '$' + amount.toFixed(2);\n    else\n      return '$' + Math.floor(amount).toLocaleString('en-US', { minimumFractionDigits: 0 });\n  }\n\n  // calculate the time until the prize period ends and render it as a human readable string (\"an hour\", \"20 minutes\")\n  function getPrizeTimeUntilString(prize) {\n    var timeUntil = moment(prize.end_timestamp).fromNow(true);\n    timeUntil = timeUntil.replace('an ', ''); // Dirty fix for \"Donate in the next an hour\".\n    timeUntil = timeUntil.replace('a ', ''); // Dirty fix for \"Donate in the next a day\".\n    return timeUntil;\n  }\n\n  // Change if an element is visible or not.\n  function changeVisibility(elem, isVisible) {\n    $(elem).css({\n      visibility: isVisible ? 'visible' : 'hidden'\n    });\n  }\n\n  function createAssetArrayWithChances(arr) {\n    var newArr = [];\n    arr.forEach(asset => {\n      for (var i = 0; i < asset.chance; i++) {\n        newArr.push(asset);\n      }\n    });\n    return newArr;\n  }\n});"]}